@page "/survey"
@using DeGierigeHollander.Gui.Shared
@using System.Text.Json;
@inject HttpClient Http

<PageTitle>Survey</PageTitle>

@using DeGierigeHollander.Gui.Shared

@if (!reportMode)
{
    <h3>Let's go!</h3>
    @if (Questions.Any() && Questions.ToArray()[visibleQuestionIndex] is not null)
    {
        @switch (GetTypeOf())
        {
            case TypeCode.Int32:
                <QuestionItem TItem=Int32 OnNextQuestion="OnNextQuestion" Question=Questions.ToArray()[visibleQuestionIndex]></QuestionItem>
                break;
            case TypeCode.Boolean:
                <QuestionItem TItem=Boolean OnNextQuestion="OnNextQuestion" Question=Questions.ToArray()[visibleQuestionIndex]></QuestionItem>
                break;
        }
    }
}
else
{
    <button class="btn-primary pb" @onclick="GenerateReport">Generate report</button>
    <ul>
        @foreach (var report in reportLines)
        {
            <li>
                <p>@report</p>
            </li>
        }
    </ul>

    @if (!string.IsNullOrEmpty(total))
    {
        <h1 class="pb">Je zou in het totaal €@total kunnen besparen.</h1>
    }

    <button class="btn-primary" @onclick="() => ShowVerlof = true">Conclusie</button>

    @if (ShowVerlof)
    {
        <h1>Voor dit bedrag kan je in totaal @NumberDaysVacation dagen onbetaald vakantie nemen!</h1>
    }
}

@code {
    private IEnumerable<Question> Questions = Enumerable.Empty<Question>();

    private int visibleQuestionIndex = 0;

    private bool reportMode = false;
    private string total;
    private string NumberDaysVacation;
    private bool ShowVerlof;

    private List<string> reportLines = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Questions = await GetQuestionsAsync();
    }

    private async Task<IEnumerable<Question>> GetQuestionsAsync()
    {
        var questions = await Http.GetFromJsonAsync<IEnumerable<Question>>("/question");

        return questions;
    }
    private void OnNextQuestion()
    {
        if (Questions.Count() - 1 > visibleQuestionIndex)
            visibleQuestionIndex++;
        else
            reportMode = true;
    }
    private TypeCode GetTypeOf()
    {
        var type = Type.GetType(Questions.ToArray()[visibleQuestionIndex].AnswerType);
        return Type.GetTypeCode(type);
    }

    private async Task GenerateReport()
    {
        var result = await Http.GetFromJsonAsync<ReportSession>("/report");
        total = result.Total.ToString();
        NumberDaysVacation = Math.Round((result.Total / 100)).ToString();
        reportLines = result.TotalAsString;
    }
}